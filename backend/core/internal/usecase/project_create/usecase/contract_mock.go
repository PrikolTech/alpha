// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -package usecase -source contract.go -destination contract_mock.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/PrikolTech/alpha/backend/core/internal/usecase/project_create/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockprojectRepo is a mock of projectRepo interface.
type MockprojectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockprojectRepoMockRecorder
	isgomock struct{}
}

// MockprojectRepoMockRecorder is the mock recorder for MockprojectRepo.
type MockprojectRepoMockRecorder struct {
	mock *MockprojectRepo
}

// NewMockprojectRepo creates a new mock instance.
func NewMockprojectRepo(ctrl *gomock.Controller) *MockprojectRepo {
	mock := &MockprojectRepo{ctrl: ctrl}
	mock.recorder = &MockprojectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprojectRepo) EXPECT() *MockprojectRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockprojectRepo) Create(ctx context.Context, in domain.ProjectCreateIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockprojectRepoMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockprojectRepo)(nil).Create), ctx, in)
}

// ExistsByCode mocks base method.
func (m *MockprojectRepo) ExistsByCode(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByCode", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByCode indicates an expected call of ExistsByCode.
func (mr *MockprojectRepoMockRecorder) ExistsByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByCode", reflect.TypeOf((*MockprojectRepo)(nil).ExistsByCode), ctx, code)
}
