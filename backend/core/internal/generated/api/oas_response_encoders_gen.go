// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func encodeProjectCreateResponse(response *ProjectCreateCreated, w http.ResponseWriter) error {
	w.WriteHeader(201)

	return nil
}

func encodeProjectDeleteByIdResponse(response *ProjectDeleteByIdNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeProjectGetAllResponse(response *ProjectGetAllResponse, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeProjectGetByIdResponse(response *Project, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUserCreateResponse(response UserCreateRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UserCreateCreated:
		w.WriteHeader(201)

		return nil

	case *UserCreateValidationError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *DomainError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(409)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeUserGetByIdResponse(response UserGetByIdRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *User:
		if err := func() error {
			if err := response.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "validate")
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *DomainError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeUserListResponse(response *UserListResponse, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}
