// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes DateTimeFilter as URI form.
func (s *DateTimeFilter) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("start", func(e uri.Encoder) error {
		if val, ok := s.Start.Get(); ok {
			return e.EncodeValue(conv.DateTimeToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"start\"")
	}
	if err := e.EncodeField("end", func(e uri.Encoder) error {
		if val, ok := s.End.Get(); ok {
			return e.EncodeValue(conv.DateTimeToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"end\"")
	}
	return nil
}

var uriFieldsNameOfDateTimeFilter = [2]string{
	0: "start",
	1: "end",
}

// DecodeURI decodes DateTimeFilter from URI form.
func (s *DateTimeFilter) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DateTimeFilter to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "start":
			if err := func() error {
				var sDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					sDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Start.SetTo(sDotStartVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		case "end":
			if err := func() error {
				var sDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					sDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.End.SetTo(sDotEndVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DateTimeFilter")
	}

	return nil
}
