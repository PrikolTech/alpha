// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EncodeURI encodes DateTimeFilter as URI form.
func (s *DateTimeFilter) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("start", func(e uri.Encoder) error {
		if val, ok := s.Start.Get(); ok {
			return e.EncodeValue(conv.DateTimeToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"start\"")
	}
	if err := e.EncodeField("end", func(e uri.Encoder) error {
		if val, ok := s.End.Get(); ok {
			return e.EncodeValue(conv.DateTimeToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"end\"")
	}
	return nil
}

var uriFieldsNameOfDateTimeFilter = [2]string{
	0: "start",
	1: "end",
}

// DecodeURI decodes DateTimeFilter from URI form.
func (s *DateTimeFilter) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DateTimeFilter to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "start":
			if err := func() error {
				var sDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					sDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Start.SetTo(sDotStartVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		case "end":
			if err := func() error {
				var sDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					sDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.End.SetTo(sDotEndVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DateTimeFilter")
	}

	return nil
}

// EncodeURI encodes Sorting as URI form.
func (s *Sorting) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("field", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(s.Field))
	}); err != nil {
		return errors.Wrap(err, "encode field \"field\"")
	}
	if err := e.EncodeField("direction", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.Direction)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"direction\"")
	}
	return nil
}

var uriFieldsNameOfSorting = [2]string{
	0: "field",
	1: "direction",
}

// DecodeURI decodes Sorting from URI form.
func (s *Sorting) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Sorting to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "field":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.Field = c
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"field\"")
			}
		case "direction":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.Direction = SortingDirection(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Sorting")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfSorting) {
					name = uriFieldsNameOfSorting[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}
