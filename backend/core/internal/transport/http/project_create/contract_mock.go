// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -package project_create -source contract.go -destination contract_mock.go
//

// Package project_create is a generated GoMock package.
package project_create

import (
	context "context"
	reflect "reflect"

	domain "github.com/PrikolTech/alpha/backend/core/internal/usecase/project_create/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockprojectUsecase is a mock of projectUsecase interface.
type MockprojectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockprojectUsecaseMockRecorder
}

// MockprojectUsecaseMockRecorder is the mock recorder for MockprojectUsecase.
type MockprojectUsecaseMockRecorder struct {
	mock *MockprojectUsecase
}

// NewMockprojectUsecase creates a new mock instance.
func NewMockprojectUsecase(ctrl *gomock.Controller) *MockprojectUsecase {
	mock := &MockprojectUsecase{ctrl: ctrl}
	mock.recorder = &MockprojectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprojectUsecase) EXPECT() *MockprojectUsecaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockprojectUsecase) Handle(ctx context.Context, in domain.ProjectCreateIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockprojectUsecaseMockRecorder) Handle(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockprojectUsecase)(nil).Handle), ctx, in)
}
